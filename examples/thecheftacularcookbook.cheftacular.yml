
mode:                   devops                   # valid modes are devops, application, and server. Server mode is very similar to devops and only useful if you want your servers to be able to run cheftacular commands
default_repository:     my-main-rails-repository # If the mode is set to devops, load this repository as the default one (can be overridden with the -R REPOSITORY_NAME flag)
default_environment:    staging                  # the default environment all commands are run in without an env setting flag
ruby_version:           ruby-2.1.2               # Default ruby version to run commands against, only matters explicitly if your repo does not have a .ruby-version file
deploy_user:            deploy                   # User on the remote systems that all remote commands will be done with
cheftacular_chef_user:  mychefuser               # Chef user on the chef user. You must have a CHEFUSERNAME.pem file in your .chef directory to authenticate
chef_server_url:        https://chef.example.com/organizations/your_organization # can be any address that has a valid chef server behind it (for chef 11). For Chef 12 the string must include the full path
ssl_verify:             false                    # Only matters if using a CA authority for your chef cert
wrapper_cookbooks:      &uppercase_business_name MyBusiness # comma delim string of wrapper cookbooks to do clean_cookbooks on
strict_version_checks:  false                    # when true, the gem will check rubygems once per day to see if theres a new version and prevent execution until this new version is bundled
auditing:               true                     # when true, the gem will collect and send auditing data about all commands that are passed to the gem. This data is stored in a chef data bag
base_file_path:         /var/www/vhosts          # The base file path the repos are stored on for each server
default_swap_location:  /mnt/1GB.swap            # default location of the swapfile build file on all systems (used for cft restart_swap)
backup_filesystem:      backup_gem               # valid entries are backup_gem | raw
chef_version:           12                       # Major Version of the Chef Server (currently supports 11|12)
data_bag_key_file:      data_bag_key             # name of the data bag key file in the ~/.chef folder for workstations
server_pass_length:     20
default_flavor_name:    1 GB Performance         # When booting servers, this flavor name is used if a flavor is not set in some way
preferred_cloud:        rackspace                # preferred cloud to interact with (currently supports rackspace and digitalocean)
preferred_cloud_region: dfw                      # preferred cloud region to interact with (please check your cloud provider for specific regions)
preferred_cloud_os:     ubuntu                   # can be centos|coreos|debian|fedora|redhat|ubuntu|vyatta . Bear in mind not all OSes have supported bootstraps at the moment
preferred_cloud_image:  Ubuntu 14.04 LTS (Trusty Tahr) (PV) # preferred cloud image to install, can use custom built images here as well. The string is matched to a valid image but specific is better
virtualization_mode:    PV                       # on rackspace cloud, set your default virtualization mode to this (only PV or PVHVM are supported)
git_based_deploys:      true
route_dns_changes_via:  rackspace                # tells cheftacular to send dns changes to this provider instead of the preferred_cloud_option
node_name_separator:    '.'                      # On rackspace, can be anything except a space, on most other hosting sites, it must be a valid url character
pre_install_packages:   ''                       # space delimited list of packages to install during a  node's initial setup process

git:
  check_remote_for_branch_existence: false       #checks the remote repository to see if the branch exists on -Z branch_name deploys, you must be authenticated LOCALLY to do this. This does not occur on remote servers

backup_config:   
  global_backup_role_name: ''                # server that is useful for fetching backups from for cft backups
  global_backup_environ:   ''
  global_backup_path:      &global_backup_path '/path/to/backup'
  backup_dir_mode:         '775'
  backup_load_command:     '' #this command should run the ENTIRE backup
  db_primary_backup_path:  &db_primary_backup_path '/mnt/postgresbackups/backups/main_backup'

#chef-repo
keep_chef_repo_cheftacular_yml_up_to_date: false
location_of_chef_repo_cheftacular_yml:     /files/default # this should be the location of the cheftacular.yml file in your wrapper cookbooks(s). NOTE: The file should be in the same place in all cases
sync_application_cheftacular_yml:          true # this lets users in application directories overwrite chef-repo cheftacular yml keys with their own keys, useful for TheCheftacularCookbook additions
replace_keys_in_chef_repo:                      # keys that should be changed when the cheftacular.yml is created in the chef-repo (its a good idea to turn off strict version checks)
  strict_version_checks: false

slack:
  default_channel: '#default'                    # Useful if the default channel on the webhook is NOT where you want to send notifications to (like failed deploys)
  webhook:                                       # the full https webhook slack gives you for a webhook integration goes here

#RVM
install_rvm_on_boot:    false                    # true|false If true, this will cause RVM to be installed for the deploy_user on boot, this makes managing RVM via cookbook impossible.
rvm_gpg_key:            409B6B1796C275462A1703113804BB82D39DC0E3

cloudflare:
  api_key:     
  user_email:  
  default_ttl: 300

cloud_authentication:
  #rackspace:
  #  api_key: 
  #  email:   
  #  username:
  #digitalocean:
  #  api_key:
  #  client_id:
  #dnsimple:
  #  email:
  #  password:
  #  token:

# the first comma in the list of log_locs is what is tailable, the others are only loggable
role_maps: # role maps for log tailing
  sensu_server_role:    
    role_name:    sensu_server
    log_location: /var/log/sensu/sensu-server.log
  graphite_server_role: 
    role_name:    graphite_server
    log_location: /var/log/carbon-cache/current
  worker_server_role:
    role_name:    worker
    log_location: /var/log/syslog,|current_repo_location|/log/delayed_job.log # commas will pull logs from multiple locations. |current_repo_location| acts as an alias for a roles default repo location

repositories:
  mybackendrepo:                                   # this row is reserved for nicknames, preferably nicknames that eliminate any hyphens in the repo_name
    repo_name:                 my-main-rails-repository
    database:                  postgresql        # Valid values are currently only postgresql or mysql
    application_database_user: databaseguy       # Name of the database user on the remote server (useful if each app has its own database user)
    stack:                     ruby_on_rails     # Currently supported: ruby_on_rails|wordpress|nodejs
    db_primary_host_role:      db_primary
    #custom_database_name:                       # this key only needs to exist if your database is named differently from REPONAME_ENV
    not_a_migration_message:                     # If you have some text that will always show up after migrations, put it here so the system doesnt think it needs to run deploys after a migration again
    has_split_branches:        false             # if you have branches like split-a and split-c, you can use this to access them when defined in the run_list_environments hash 
    specific_chef_passwords:                       # Special keys that you want auto-generated for their repo by for the ENV chef_passwords bag, the value for them is their length
      pg_root_pass:         20
      pg_app_pass:          20
    short_database_name:         api #used for backup_gem
    test_database_setup_command: 'rake db:test:prepare'
    custom_nginx_configs:        &custom_nginx_configs
      - 'client_max_body_size 15M'
      - 'client_body_in_single_buffer on'
      - 'client_body_buffer_size 128K'
    application_services:
      clockwork_scheduler:
        rewrite_underscore_to_dash: true #this key existing triggers the effect, it must not exist to not have the effect
        run_on_role:                clockwork
        command:                    'clockwork app/task_schedule.rb'
      delayed_job_misc: 
        rewrite_underscore_to_dash: true
        run_on_role:                djworker
        deactivate_on_role:         djworker_deactivate
        application_log_cleanup:    true
        delayedjob_log_cleanup:     true
        syslog_cleanup:             true
        command:                    'rake jobs:work'
        queues:
          default:
            - miscellaneous
          production:
            - my_special_job_queue
    application_crons: 
      data_collecting_cron:   
        minute:  '0,15,30,45'
        hour:    '*'
        command: 'reports:generate'
        type:    'rake'
      cleanup_app_log:
        minute:  '0'
        hour:    '0'
        command: "tail -5000 CURRENT_PATH/log/CURRENT_ENVIRONMENT.log > CURRENT_PATH/log/CURRENT_ENVIRONMENT.log" #CURRENT_PATH and CURRENT_ENVIRONMENT are substituted in the cookbook
        type:    'raw'

  myfrontendrepo:
    repo_name:                       my-frontend-repository
    database:                        none
    stack:                           nodejs #remember, this is the stack the server is using on the server side to SERVE requests, not the code its running to render things on the client side
    route_wildcard_requests_for_tld: true   #this triggers special behaviors for server creation (cloud_bootstrap). If a server is a load balancer for this repo, server creation will route wildcard requests to it
    custom_nginx_configs:            *custom_nginx_configs
  all:                                             # This key should always exist
    repo_name: all
    database:  none                              # We dont want to run migrations on an all deploy
    stack:     all

#if you are assigning environments with run lists *in addition to* chef environments, use this. Nodes should have 0-1 of these run list envs, no more.
# Also used for the update_split_branches command, a branch like split_staging is parsed into split-staging.
# List your split_environments, what environment theyre under, and their role name here
# The key should be the role name and the value should be the ENVIRONMENT this key corresponds to (for RAILS_ENV and the like)
run_list_environments:
  staging:
    split_staging: splitstaging
  production:
    split_a:       splita

#YAML array of the types of databases stored on your database primary
db_primary_backup_database_stacks: 
  - postgresql

#nodes to initialize when cft environment command is run. All keys are optional but not assigning a flavor to a node will default it to the default_flavor_name key
#flavor:     the flavor the node will be booted with
#descriptor: optional string to be parsed into the nodes config. Can be used to pair with load balancers, etc
#dns_config: by default, nodes are assigned NODE_NAME.ENV_TLD for their DNS, this can be overridden here. Both NODE_NAME and ENV_TLD are interpolated if used
env_boot_nodes:
  devstaging_nodes:
    mybackend01d:     
      flavor:     2 GB Performance
      descriptor: lb:my-main-rails-repository
    mybackendlbd:     
      dns_config: api.ENV_TLD
    dbmasterd:    
      flavor:     8 GB Performance
      dns_config: db.ENV_TLD

#Extra data used for nodes when the cft scale up command is run. Digits in the node are parsed out and the nodes name (without digits) must match 100% to trigger the custom data
scaling_nodes:
  mybackend01p:
    flavor:     8 GB Performance
    descriptor: lb:my-main-rails-repository

#used in the test_env command, these are nodes that spun up for split-testing environments. They connect to their primary environments database. IE a splitstaging node may connect to a staging database
#NOTE! splitenv data bag data is contained in whatever env houses the splitenv!
split_env_nodes:
  mybackendSPLITENV01:
    flavor:      2 GB Performance
    descriptor:  lb:my-main-rails-repository-ENV
  mybackendSPLITENVlb:
    dns_config:  api.ENV_TLD

global_chef_passwords: #passwords you want auto-generated for a chef_env for all repositories
  pg_pass: 20

#used in the get_haproxy_log command
haproxy_config:
  role_name:    haproxy #default role all haproxy servers will have
  default_port: 22002

location_aliases:
  backups:      *db_primary_backup_path
  backupmaster: *global_backup_path
  varlog:       /var/log
  sensu:        /etc/sensu
  api_root:     /my/api/root/location

chef_server:
  interactable:  false   #this key can be used to easily disable access to the chef-server command
  ssh_user:      deploy  #This is the user who can be ssh'd with onto the chef-server. If root, you can leave sudo_password blank.
  sudo_password: MY_PASS #sudo password for accessing the chef-server-ctl command for the chef-server command

role_toggling:
  deactivated_role_suffix: '_deactivate' #for the cft role_toggle command, the suffix for your deactivated roles
  strict_roles:            true           #for the cft role_toggle command, if roles should be able to be set for a node that did not have the role (at all) before
  skip_confirm:            false          # skips confirming for role toggle command

TheCheftacularCookbook:
  organization_name:         *uppercase_business_name
  base_application_location: '/var/www/vhosts'
  db_primary_db_app_roles:   mybackendrepo
  bundler_version:           1.10.6
  deploys:
    rollback_on_error:       true        #allow for debugging of code placed in directory if false.
  override_delayed_job_queues_on_split_environments: false
  chef_environment_to_app_repo_branch_mappings: #THESE BRANCHES MUST EXIST ON THE REPO(S)
    devstaging:  devstaging
    staging:     staging
    production:  master
    test:        devstaging
    datastaging: master
  default_volume_config: #this will only create volumes on clouds that support creating volumes
    database:
      default_size:     100
      default_type:     SSD
    database_backup:
      default_size:     100
      default_type:     SATA
    backup_server:
      default_size:     1000
      default_type:     SATA
  graphite:
    grafana_auth_user: &lowercase_business_name mybusiness
    storage_schemas:
      cohorts_15_min_for_900_days:
        names:
          - reports
        pattern:    "^mybackendrepo.production.SCHEMA_NAME.*"
        retentions: "15m:900d"
      default_1min_for_60day:
        pattern:    ".*"
        retentions: "60:60d"
    secret_key:     '' # pwgen -s 32 1
    time_zone:      'America/Chicago'
  graylog2:
    password_secret:    '' # pwgen -s 96 1
    root_password_sha2: '' # echo -n yourpassword | shasum -a 256
  haproxy:
    admin_username: *uppercase_business_name
    admin_password: ''
    ssl:
      cookbook_containing_ssl_certs: *uppercase_business_name
      ssl_file_name:                 ENVIRONMENT.pem          #this file should be stored in the files/default directory of the cookbook
    role_to_node_name_routing:
      haproxy_route_to_split_a: myfrontendrepolbp
  swap:
    check_file_name: 2gb_swap_genfile.sh
    path:            /mnt/2GB.swap
    bs:              2048
    count:           1048576
    swappiness:      60
  attribute_toggles: #for these to trigger, the setting must already be TRUE
    CHEF_ENVIRONMENT_backups_activated:
      set_to: false
      when:
        not_include_role: db_prepare_backups_setup
    receive_backups:
      set_to: false
      when:
        not_include_role: db_fetch_and_restore_backups
  sensu_build:
    chef_daemon_delay: 1200 #time between chef-client runs on the build server in *seconds*
    repository_role_names:
      mybackendrepo:
        branches_to_test:
          - master
          - staging
  sensu:
    custom_checks:
      check_workers:
        check_file_folder: *lowercase_business_name
        check_file_name:   check-workers.rb
        cookbooks:         *uppercase_business_name
    reinstall_sensu_gems:           false
    uchiwa_http_basic_username:     *lowercase_business_name
    environments_to_monitor:
      - staging
      - production
    haproxy_monitoring_roles:
      - haproxy
    additional_sensu_server_checks:
      additional_checks:
        cookbook:                   *uppercase_business_name
        filename_without_extension: additional_sensu_server_checks
      additional_metrics:
        cookbook:                   *uppercase_business_name
        filename_without_extension: additional_sensu_server_metrics
    slack_handlers: #valid modes are: general-infrastructure|critical|deployment|continuous-integration|slow-queries
      slack:
        token:     &slack_token YOUR_SLACK_TOKEN # should look like "TXXXXXXXX/XXXXXXXX/XZXZXZXZXZXZXZXZXZXZXZXZ"
        team_name: *lowercase_business_name
        channel:   YOUR_INFRA_SLACK_CHANNEL
        modes:      
          - general-infrastructure
      slack_critical:
        token:     *slack_token
        team_name: *lowercase_business_name
        channel:   '#YOUR_CRITICAL_INFRA_SLACK_CHANNEL'
        modes:      
          - critical
      slack_deployment:
        token:     *slack_token
        team_name: *lowercase_business_name
        channel:   YOUR_DEPLOYMENT_CHECKING_CHANNEL
        modes:
          - deployment
      slack_dev:
        token:     *slack_token
        team_name: *lowercase_business_name
        channel:   YOUR_SLACK_CI_CHANNEL
        modes:
          - continuous-integration
      slack_backend_slow_queries:
        token:     *slack_token
        team_name: *lowercase_business_name
        channel:   YOUR_SLOW_QUERIES_CHANNEL
        modes:
          - slow-queries
    crons: 
      refresh_production:   
        minute:  '45'
        hour:    '10'
        command: '/opt/sensu/embedded/bin/cft deploy -R mybackendrepo -p'
      refresh_backupmaster:
        minute:  '0'
        hour:    '5'
        command: '/opt/sensu/embedded/bin/cft deploy -r backup -p'
  iptables:
    additional_iptables_recipes:
      additional_iptables_rules:
        cookbook:                   *uppercase_business_name
        filename_without_extension: additional_iptables_rules
    role_maps:
      web_servers:     web
      sensu_server:    sensu_server
      sensu_clients:   sensu_client
      haproxy:         haproxy
      graylog2_server: graylog2_server
      graphite_server: graphite_server
      database:        db